var documenterSearchIndex = {"docs":
[{"location":"#CubeFiles","page":"Home","title":"CubeFiles","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CubeFiles.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#CubeFiles.CubeField","page":"Home","title":"CubeFiles.CubeField","text":"CubeField{T}\n\nMinimal container for scalar-field data from a Gaussian .cube (or similar).\n\nFields:\n\norigin::SVector{D,T}: Cartesian origin of the grid (same units as positions)\naxes::NTuple{D,SVector{D,T}}: grid vectors a₁, a₂, ..., a_D (each length-D)\nvalues::Array{T,3}: 3D scalar field (Fortran-order typical of .cube)\nname::Symbol: identifier, e.g. :ELF, :density\nmetadata::NamedTuple: free-form extras (units, comment, etc.)\n\n\n\n\n\n","category":"type"},{"location":"#CubeFiles.CubeSystem","page":"Home","title":"CubeFiles.CubeSystem","text":"CubeSystem{D,S,F} <: AtomsBase.AbstractSystem{D}\n\nAn AtomsBase-compatible system that packs an underlying AbstractSystem together with a scalar field (e.g. ELF) read from a .cube file.\n\n\n\n\n\n","category":"type"},{"location":"#CubeFiles.CubeSystem-Tuple{AtomsBase.AbstractSystem{3}, CubeFiles.CubeField{3}}","page":"Home","title":"CubeFiles.CubeSystem","text":"CubeSystem(system::AtomsBase.AbstractSystem{3}, field::CubeField{3})\n\nAttach a cube field to an existing 3D AtomsBase system.\n\n\n\n\n\n","category":"method"},{"location":"#CubeFiles.readcube_field-Tuple{AbstractString}","page":"Home","title":"CubeFiles.readcube_field","text":"readcube_field(filename; name=:ELF, metadata=(;))\n\nRead a Gaussian-style .cube file and return a CubeField{3,Float64}.\n\nNotes\n\nUses z-fastest, then y, then x ordering (the standard in .cube files).\nAlso parses origin and grid vectors from header lines.\nAtom block is parsed and stored in metadata for convenience.\n\n\n\n\n\n","category":"method"},{"location":"#CubeFiles.readcube_system-Tuple{AbstractString, AtomsBase.AbstractSystem{3}}","page":"Home","title":"CubeFiles.readcube_system","text":"readcube_system(filename, system; name=:ELF, metadata=(;))\n\nRead filename (.cube) and return CubeSystem(system, field).\n\n\n\n\n\n","category":"method"},{"location":"#CubeFiles.value_at-Tuple{CubeSystem{3, S} where S<:AtomsBase.AbstractSystem{3}, AbstractVector{<:Real}}","page":"Home","title":"CubeFiles.value_at","text":"value_at(cs::CubeSystem{3}, r::SVector{3,<:Real};\n         mode::Symbol = :trilinear, outside::Symbol = :error)\n\nr is expected to be in Å units\n\nmode:\n\n:trilinear  → trilinear interpolation (default)\n:voxel      → return value at the lower-corner grid node of the voxel containing r\n:nearest    → return value at the nearest grid node to r\n\n\n\n\n\n","category":"method"}]
}
